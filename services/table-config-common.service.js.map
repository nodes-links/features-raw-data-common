{"version":3,"file":"table-config-common.service.js","sourceRoot":"","sources":["../../services/table-config-common.service.ts"],"names":[],"mappings":";;;AAEA;;;;;;GAMG;AACH,MAAa,wBAAwB;IAmBnC;QACE,IAAI,CAAC,MAAM,GAAG,IAAI,OAAO,CAAyB,OAAO,CAAC,EAAE;YAC1D,IAAI,IAAI,CAAC,OAAO;gBAAE,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAxBD,4DAwBC","sourcesContent":["import { IPrimaveraTable } from '../interfaces/IPrimaveraTable';\n\n/**\n * This makes the primavera tables' configuration available as a promise. The promise gets resolved\n * by loading the contents of /assets/config/primavera-tables-config.json\n *\n * @export\n * @class TableConfigCommonService\n */\nexport class TableConfigCommonService {\n  /**\n   * The property where the table configs are stored.\n   *\n   * @type {Array<IPrimaveraTable>}\n   * @memberof TableConfigCommonService\n   */\n  public _tables: Array<IPrimaveraTable>;\n\n  /**\n   * The public promise that resolves to the tables' config. The config is loaded from the json file\n   * only once. The results are then stored in the private property _tables and obtained from that in\n   * subsequent calls to the promise.\n   *\n   * @type {Promise<Array<IPrimaveraTable>>}\n   * @memberof TableConfigCommonService\n   */\n  public tables: Promise<Array<IPrimaveraTable>>;\n\n  constructor() {\n    this.tables = new Promise<Array<IPrimaveraTable>>(resolve => {\n      if (this._tables) resolve(this._tables);\n    });\n  }\n}\n"]}