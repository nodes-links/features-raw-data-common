{"version":3,"file":"raw-data-common.service.js","sourceRoot":"","sources":["../../services/raw-data-common.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRawTableData } from '../interfaces/IRawTableData';\nimport * as _ from 'lodash';\nconst moment = require('moment');\nimport { ReplaySubject } from 'rxjs';\nimport { daysDiff, setStartOfDay, addDays } from '@nl/util/date-helpers';\nimport { StoreRawDataOperationStatus, StoreRawDataErrorType } from '@nl/interfaces/raw-data';\n\nexport interface IRawDataServiceDataSet {\n  status: StoreRawDataOperationStatus;\n  errorType?: StoreRawDataErrorType;\n  startDate?: Date;\n  endDate?: Date;\n  dataDate?: Date;\n  currentDate?: Date;\n  dateRange?: number;\n  daysLeft?: number;\n  wbs?: { [key: string]: any };\n  tasks?: any[];\n  relationships?: any[];\n  raw?: Array<IRawTableData>;\n}\n\n/**\n * This is making the raw data parsed from the import of primavera file (XER), available to other\n * services/components.\n *\n * @export\n * @class RawDataCommonService\n */\nexport class RawDataCommonService {\n  public static TMP_VERSION_KEY = '_.TMP._';\n  /**\n   * This is the property containing the actual data.\n   */\n  protected tmpRawData: Array<IRawTableData> = [];\n  protected _subjects: { [versionRef: string]: ReplaySubject<IRawDataServiceDataSet> } = {};\n  protected _data: { [versionRef: string]: IRawDataServiceDataSet } = {};\n  protected _waitingOn: { [versionRef: string]: boolean } = {};\n\n  /**\n   * Service constructor.\n   * @param PrimaveraParsingCommonEvents The RawDataService subscribes to the following PrimaveraEventsService events:\n   *\n   * 1. initializing: To clear the data.\n   * 2. tableDiscovered: To add a new table.\n   * 3. headersDiscovered: To add the table's headers.\n   * 4. rowDiscovered: to add a row to a table.\n   * 5. taskDiscovered: to update the start/end dates of the project.\n   */\n  constructor() {}\n\n  public for(versionRef: string) {\n    const subjectExists = this._subjects[versionRef];\n    if (!subjectExists) this._subjects[versionRef] = new ReplaySubject<IRawDataServiceDataSet>(1);\n    return this._subjects[versionRef].asObservable();\n  }\n\n  public startRawDataIngestion() {\n    this.for(RawDataCommonService.TMP_VERSION_KEY); // to initialize the subject if it doesn't exist\n    this.tmpRawData = [];\n  }\n\n  public finishRawDataIngestion() {\n    this.populate(RawDataCommonService.TMP_VERSION_KEY, {\n      data: this.tmpRawData,\n      status: StoreRawDataOperationStatus.Success\n    });\n    this._subjects[RawDataCommonService.TMP_VERSION_KEY].next(this._data[RawDataCommonService.TMP_VERSION_KEY]);\n  }\n\n  public addVersion(versionRef: any, rawData: { data: Array<IRawTableData> }) {\n    if (!this._subjects[versionRef]) {\n      this._subjects[versionRef] = new ReplaySubject<IRawDataServiceDataSet>(1);\n    }\n\n    this.populate(versionRef, { ...rawData, status: StoreRawDataOperationStatus.Success });\n\n    this._subjects[versionRef].next(this._data[versionRef]);\n  }\n\n  /**\n   * Adds a new (empty) table to the list of tables.\n   * @param index Table index in the list of tables.\n   * @param title Table title.\n   */\n  public addTable(index: number, title: string) {\n    this.tmpRawData[index] = {\n      settings: {\n        data: [],\n        colHeaders: null\n      },\n      title: title\n    };\n  }\n\n  /**\n   * Adds the headers to the table at the given index.\n   * @param index Table index in the list of tables.\n   * @param headers An array of strings containing the the headers of the table at the given index. These are not in a user-friendly\n   * format, instead they are as defined\n   * [here](https://docs.oracle.com/cd/E38975_01/English/Mapping_and_Schema/Data_Mapping_Docs/OdsFieldMapTable.html).\n   * The conversion to a friendlier format conversion happens at a later stage.\n   */\n  public addHeaders(index: number, headers: string[]) {\n    this.tmpRawData[index].settings.colHeaders = headers;\n  }\n\n  /**\n   * Adds a new row to the table at the given index.\n   * @param index Table index in the list of tables.\n   * @param row The row information in object form i.e. key/value pairs.\n   */\n  public addRow(index: number, row: any) {\n    this.tmpRawData[index].settings.data.push(row);\n  }\n\n  protected populate(\n    versionRef: any,\n    rawData: { data: Array<IRawTableData>; status: StoreRawDataOperationStatus; errorType?: StoreRawDataErrorType } = {\n      data: [],\n      status: StoreRawDataOperationStatus.Success\n    }\n  ) {\n    this._data[versionRef] = { raw: rawData.data, status: rawData.status, errorType: rawData.errorType };\n\n    if (rawData.status === StoreRawDataOperationStatus.Success) {\n      this.processResults(versionRef);\n    }\n  }\n\n  protected processResults(versionRef: any) {\n    this.processProject(versionRef);\n    this.processWbs(versionRef);\n    this.processTasks(versionRef);\n    this.processRelationships(versionRef);\n    this.calculateDuration(versionRef);\n    this.calculateDaysLeft(versionRef);\n  }\n\n  private processProject(versionRef: any) {\n    try {\n      const projectTable = _.find(this._data[versionRef].raw, t => t.title === 'PROJECT');\n      if (projectTable) {\n        const dataDateProject = _.chain(projectTable.settings.data)\n          .filter(p => p.loaded_scope_level === '7')\n          .minBy('last_recalc_date')\n          .value();\n        if (dataDateProject && dataDateProject.last_recalc_date) {\n          this._data[versionRef].dataDate = moment.utc(dataDateProject.last_recalc_date).startOf('day').toDate();\n        } else {\n          this._data[versionRef].dataDate = null;\n        }\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private processWbs(versionRef: any) {\n    try {\n      const wbss: any = this._data[versionRef].raw.find(t => t.title === 'PROJWBS');\n\n      if (!wbss || !wbss.settings.data) {\n        this._data[versionRef].wbs = null;\n      } else {\n        this._data[versionRef].wbs = wbss.settings.data.reduce(function (map, obj) {\n          map[obj.wbs_id] = { ...obj, tasks: [] };\n          return map;\n        }, {});\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private processTasks(versionRef: any) {\n    try {\n      const schedule = this._data[versionRef];\n      const tasksTable = _.find(this._data[versionRef].raw, t => t.title === 'TASK');\n      schedule.tasks = [];\n      tasksTable.settings.data.forEach(row => {\n        const id = row.task_id;\n        const name = row.task_name;\n        const code = row.task_code;\n        const wbsId = row.wbs_id;\n        const wbsName = schedule.wbs && schedule.wbs[wbsId] ? schedule.wbs[wbsId].wbs_name : null;\n        const rawTargetStartDate = new Date(row.target_start_date);\n        const rawTargetEndDate = new Date(row.target_end_date);\n        const rawActualStartDate = row.act_start_date ? new Date(row.act_start_date) : null;\n        const rawActualEndDate = row.act_end_date ? new Date(row.act_end_date) : null;\n        const rawReEndDate = row.reend_date ? new Date(row.reend_date) : null;\n        const startDate = setStartOfDay(new Date(row.target_start_date));\n        const endDate = addDays(setStartOfDay(new Date(row.target_end_date)), 1);\n        const actualStartDate = row.act_start_date ? setStartOfDay(new Date(row.act_start_date)) : null;\n        const actualEndDate = row.act_end_date ? addDays(setStartOfDay(new Date(row.act_end_date)), 1) : null;\n        const reEndDate = row.reend_date ? addDays(setStartOfDay(new Date(row.reend_date)), 1) : null;\n        const computedStartDate = this.computeStartDate(actualStartDate, actualEndDate, reEndDate, startDate);\n        const computedEndDate = this.computeEndDate(actualStartDate, actualEndDate, reEndDate, endDate);\n        const rawComputedStartDate = this.computeStartDate(\n          rawActualStartDate,\n          rawActualEndDate,\n          rawReEndDate,\n          rawTargetStartDate\n        );\n        const rawComputedEndDate = this.computeEndDate(\n          rawActualStartDate,\n          rawActualEndDate,\n          rawReEndDate,\n          rawTargetEndDate\n        );\n        const isActualized = !!actualEndDate;\n        const isStartActualized = !!actualStartDate && (!!actualEndDate || !!reEndDate);\n        const type = ['TT_FinMile', 'TT_Mile'].find(v => v === row.task_type) ? 'milestone' : 'task';\n        const rawType = row.task_type;\n        const task = {\n          id,\n          name,\n          code,\n          startDate,\n          endDate,\n          actualStartDate,\n          actualEndDate,\n          reEndDate,\n          computedStartDate,\n          computedEndDate,\n          type,\n          rawType,\n          wbsId,\n          wbsName,\n          rawTargetStartDate,\n          rawTargetEndDate,\n          rawActualStartDate,\n          rawActualEndDate,\n          rawReEndDate,\n          rawComputedStartDate,\n          rawComputedEndDate,\n          isActualized,\n          isStartActualized\n        };\n        schedule.tasks.push(task);\n        schedule.wbs[wbsId].tasks.push(task);\n        this.reviseProjectDates(versionRef, computedStartDate, computedEndDate);\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  private processRelationships(versionRef: any) {\n    try {\n      const schedule = this._data[versionRef];\n      const relTable = _.find(this._data[versionRef].raw, t => t.title === 'TASKPRED');\n      schedule.relationships = [];\n      relTable.settings.data.forEach(row => {\n        const sourceId = row.pred_task_id;\n        const targetId = row.task_id;\n        const lag = Math.floor(row.lag_hr_cnt / 8) || 0;\n        const type = row.pred_type;\n        const originalId = row.task_pred_id;\n        schedule.relationships.push({ sourceId, targetId, lag, type, originalId });\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Revises the project start/end date after the addition of a newly discovered task.\n   *\n   * @private\n   * @param {Moment} startDate Start date of the task.\n   * @param {Moment} endDate End date of the task.\n   * @memberof RawDataService\n   */\n  private reviseProjectDates(versionRef: any, startDate: Date, endDate: Date) {\n    const scheduleStartDate = this._data[versionRef].startDate;\n    if (!scheduleStartDate || startDate.getTime() < scheduleStartDate.getTime()) {\n      this._data[versionRef].startDate = new Date(startDate);\n    }\n\n    const scheduleEndDate = this._data[versionRef].endDate;\n    if (!scheduleEndDate || endDate.getTime() > scheduleEndDate.getTime()) {\n      this._data[versionRef].endDate = new Date(endDate);\n    }\n  }\n\n  /**\n   * Evaluates the duration of the entire project and stores it in the dateRange property.\n   */\n  private calculateDuration(versionRef: any) {\n    const scheduleStartDate = this._data[versionRef].startDate;\n    const scheduleEndDate = this._data[versionRef].endDate;\n    this._data[versionRef].dateRange = daysDiff(scheduleEndDate, scheduleStartDate);\n  }\n\n  /**\n   * Evaluates the days left for this project based on DataDate and stores it in the projectDaysLeft property.\n   */\n  private calculateDaysLeft(versionRef: any) {\n    const scheduleEndDate = this._data[versionRef].endDate;\n    const scheduleDataDate = new Date(this._data[versionRef].dataDate);\n    setStartOfDay(scheduleDataDate);\n    this._data[versionRef].daysLeft = daysDiff(scheduleEndDate, scheduleDataDate);\n  }\n\n  /**\n   * Returns the percentage completion of a task, as a string, on the given number of days after the project's start date.\n   *\n   * @param {Date} startDate The start date of the task.\n   * @param {Date} endDate The end date of the task.\n   * @param {number} duration The duration of the task. This could have been computed, but it's passed in for efficiency, as this\n   * method is called all the time for objects whose duration is fixed and has been pre-computed.\n   * @param {number} daysFromStart How many days since the start of the project have passed.\n   * @returns {string}\n   * @memberof RawDataService\n   */\n  public getPercentComplete(\n    versionRef: any,\n    startDate: Date,\n    endDate: Date,\n    duration: number,\n    daysFromStart: number\n  ): string {\n    const schedule = this._data[versionRef];\n    if (daysDiff(endDate, schedule.startDate) < daysFromStart) {\n      return '100%';\n    }\n\n    if (daysDiff(startDate, schedule.startDate) > daysFromStart) {\n      return '0%';\n    }\n\n    return '' + (100 * (daysFromStart - daysDiff(startDate, schedule.startDate))) / duration + '%';\n  }\n\n  /**\n   * Returns whether the task will have been completed on the given number of days after the project's start date.\n   *\n   * @param {Date} endDate The end date of the task.\n   * @param {number} daysFromStart How many days since the start of the project have passed.\n   * @returns {boolean}\n   * @memberof RawDataService\n   */\n  public isComplete(versionRef: any, endDate: Date, daysFromStart: number): boolean {\n    const schedule = this._data[versionRef];\n    return daysDiff(endDate, schedule.startDate) < daysFromStart;\n  }\n\n  public getDaysFromStart(versionRef: any, date?: Date): number {\n    const schedule = this._data[versionRef];\n    if (!date) {\n      date = this._data[versionRef].currentDate;\n    }\n\n    return daysDiff(date, schedule.startDate);\n  }\n\n  private computeStartDate(actualStartDate, actualEndDate, reEndDate, startDate) {\n    return !!actualStartDate && (actualEndDate || reEndDate) ? actualStartDate : startDate;\n  }\n\n  private computeEndDate(actualStartDate, actualEndDate, reEndDate, endDate) {\n    if (!!actualStartDate && !!actualEndDate) {\n      return actualEndDate;\n    }\n\n    if (!!actualStartDate && !!reEndDate) {\n      return reEndDate;\n    }\n\n    return endDate;\n  }\n}\n"]}