{"version":3,"file":"zip-common.service.js","sourceRoot":"","sources":["../../services/zip-common.service.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Papa from 'papaparse';\nimport * as _ from 'lodash';\nimport { first } from 'rxjs/operators';\nimport { RawDataCommonService } from './raw-data-common.service';\nimport { TableConfigCommonService } from './table-config-common.service';\nimport { IPrimaveraTable } from '../interfaces/IPrimaveraTable';\n\nconst JSZip = require('jszip');\n\n/**\n *\n * @export\n * @class ZipCommonService\n */\nexport class ZipCommonService {\n  /**\n   * Creates an instance of ZipCommonService.\n   *\n   * @param {RawDataCommonService} rawDataService\n   * @param {TableConfigCommonService} [tableConfig]\n   * @memberof ZipCommonService\n   */\n  constructor(private rawDataService: RawDataCommonService, private tableConfig?: TableConfigCommonService) {}\n\n  /**\n   * Generates a zip\n   *\n   * @param {boolean} removeNames\n   * @param {boolean} [useNlSuffix=false]\n   * @param {string} [resultType='blob']\n   * @param {boolean} current whether to get current version and ignore versionRef\n   * @returns {Promise<Blob>}\n   * @memberof ZipCommonService\n   */\n  public async generateZip(\n    versionRef: any,\n    removeNames: boolean,\n    useNlSuffix: boolean = false,\n    resultType: string = 'blob'\n  ): Promise<any> {\n    return new Promise<any>(async (resolve, reject) => {\n      try {\n        const tables: Array<IPrimaveraTable> = await this.tableConfig.tables;\n        const zip = new JSZip();\n        this.rawDataService\n          .for(versionRef)\n          .pipe(first())\n          .subscribe(async ({ raw }) => {\n            for (let i = 0; i < raw.length; i++) {\n              const table = raw[i];\n              const tableConfig: IPrimaveraTable = _.find(tables, (t: IPrimaveraTable) => t.key === table.title);\n              let tableAsString = '';\n              if (!removeNames || !tableConfig || _.every(tableConfig.columns, col => !col.isName))\n                tableAsString = Papa.unparse(table.settings.data);\n              else {\n                const masked = [];\n                const mask = {};\n                _.filter(tableConfig.columns, col => col.isName).forEach(col => {\n                  mask[col.key] = '';\n                });\n                for (let j = 0; j < table.settings.data.length; j++) {\n                  const el = table.settings.data[j];\n                  masked.push(_.assign({}, el, mask));\n                }\n                tableAsString = Papa.unparse(masked);\n              }\n              zip.file(`${raw[i].title}${tableConfig && useNlSuffix ? '_NL' : ''}.csv`, tableAsString);\n            }\n\n            const content = await zip.generateAsync({ type: resultType });\n            resolve(content);\n          });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n"]}