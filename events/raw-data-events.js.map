{"version":3,"file":"raw-data-events.js","sourceRoot":"","sources":["../../events/raw-data-events.ts"],"names":[],"mappings":";;;AAAA,+BAA+B;AAG/B;;;;;;GAMG;AACH,MAAa,mBAAmB;IAAhC;QACE;;;;;WAKG;QACI,oBAAe,GAA6E,IAAI,cAAO,EAI1G,CAAC;QAEL;;;;;WAKG;QACI,oBAAe,GAIjB,IAAI,cAAO,EAIZ,CAAC;QACL;;;;;WAKG;QACI,iBAAY,GAAkB,IAAI,cAAO,EAAE,CAAC;QAEnD;;;;;WAKG;QACI,+BAA0B,GAI5B,IAAI,cAAO,EAIZ,CAAC;QAEL;;;;;WAKG;QACI,2BAAsB,GAAkC,IAAI,cAAO,EAEtE,CAAC;QAEL;;;;;WAKG;QACI,gBAAW,GAAqD,IAAI,cAAO,EAG9E,CAAC;IACP,CAAC;CAAA;AAxED,kDAwEC","sourcesContent":["import { Subject } from 'rxjs';\nimport { IPrimaveraTask } from '../interfaces/IPrimaveraTask';\n\n/**\n * This class provides access to events related with processing the raw data to extract graph data.\n * By using Subject, it is possible to use this service for both subscribing and triggering these events.\n *\n * @export\n * @class RawDataCommonEvents\n */\nexport class RawDataCommonEvents {\n  /**\n   * This is triggered when a project task is discovered in the raw data.\n   *\n   * @type {Subject<IPrimaveraTask[]>}\n   * @memberof RawDataCommonEvents\n   */\n  public tasksDiscovered: Subject<{ versionRef?: any; tasks: IPrimaveraTask[]; current: boolean }> = new Subject<{\n    versionRef?: any;\n    tasks: IPrimaveraTask[];\n    current: boolean;\n  }>();\n\n  /**\n   * This is triggered when an edge (i.e. relationship between two tasks) is discovered in the raw data.\n   *\n   * @type {Subject<{ sourceId: string; targetId: string; lag: number; type: string }[]>}\n   * @memberof RawDataCommonEvents\n   */\n  public edgesDiscovered: Subject<{\n    versionRef?: any;\n    edges: { sourceId: string; targetId: string; lag: number; type: string }[];\n    current: boolean;\n  }> = new Subject<{\n    versionRef?: any;\n    edges: { sourceId: string; targetId: string; lag: number; type: string }[];\n    current: boolean;\n  }>();\n  /**\n   * This is triggered by the primavera parsing service right before it starts processing the results.\n   *\n   * @type {Subject<void>}\n   * @memberof RawDataCommonEvents\n   */\n  public initializing: Subject<void> = new Subject();\n\n  /**\n   * This is triggered when processing results completed\n   *\n   * @type {Subject<void>}\n   * @memberof RawDataCommonEvents\n   */\n  public processingResultsCompleted: Subject<{\n    versionRef?: any;\n    rawData: any;\n    processingPerformed: boolean;\n  }> = new Subject<{\n    versionRef?: any;\n    rawData: any;\n    processingPerformed: boolean;\n  }>();\n\n  /**\n   * This is triggered when the current version is changing\n   *\n   * @type {Subject<void>}\n   * @memberof RawDataCommonEvents\n   */\n  public currentVersionChanging: Subject<{ versionRef?: any }> = new Subject<{\n    versionRef?: any;\n  }>();\n\n  /**\n   * This is triggered when a new version is initialized\n   *\n   * @type {Subject<void>}\n   * @memberof RawDataCommonEvents\n   */\n  public initialized: Subject<{ versionRef?: any; current?: boolean }> = new Subject<{\n    versionRef?: any;\n    current?: boolean;\n  }>();\n}\n"]}