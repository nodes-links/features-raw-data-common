{"version":3,"file":"data-to-s3-json-filtered.js","sourceRoot":"","sources":["../../aws/data-to-s3-json-filtered.ts"],"names":[],"mappings":";;;AAAA,MAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAC/B,4BAA4B;AAE5B,MAAM,OAAO,GAAG;IACd,IAAI,EAAE,GAAG,CAAC,EAAE,CACV,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;QACV,SAAS;QACT,WAAW;QACX,WAAW;QACX,WAAW;QACX,QAAQ;QACR,mBAAmB;QACnB,iBAAiB;QACjB,gBAAgB;QAChB,cAAc;QACd,YAAY;KACb,CAAC;IACJ,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,cAAc,EAAE,WAAW,EAAE,cAAc,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;IACpG,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG;IACnB,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,gBAAgB,EAAE,UAAU,EAAE,eAAe,EAAE,SAAS,CAAC,CAAC;CAClG,CAAC;AAEK,MAAM,gBAAgB,GAAG,CAC9B,QAAgB,EAChB,YAAmB,EACnB,YAAoB,EACpB,MAAc,EACd,MAAc,EACd,IAAY,EACE,EAAE;IAChB,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,YAAY,CAAC,MAAM,EAAE;QAC5C,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAAC;QACtD,MAAM,WAAW,GAAG,EAAE,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;QAC9C,MAAM,oBAAoB,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACrD,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;QACjC,CAAC,CAAC,CAAC;QACH,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC,EAAE;YACxB,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;QACH,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC/C,MAAM,GAAG,GAAG,GAAG,MAAM,IAAI,QAAQ,OAAO,CAAC;QACzC,MAAM,KAAK,GAAG;YACZ,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,GAAG;YACR,IAAI,EAAE,UAAU;YAChB,WAAW,EAAE,kBAAkB;YAC/B,OAAO,EAAE,IAAI;SACd,CAAC;QACF,OAAO,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC;KACzC;IACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;AAC3B,CAAC,CAAC;AA9BW,QAAA,gBAAgB,oBA8B3B","sourcesContent":["const AWS = require('aws-sdk');\r\nimport * as _ from 'lodash';\r\n\r\nconst filters = {\r\n  TASK: row =>\r\n    _.pick(row, [\r\n      'task_id',\r\n      'task_code',\r\n      'task_name',\r\n      'task_type',\r\n      'wbs_id',\r\n      'target_start_date',\r\n      'target_end_date',\r\n      'act_start_date',\r\n      'act_end_date',\r\n      'reend_date'\r\n    ]),\r\n  TASKPRED: row => _.pick(row, ['task_pred_id', 'pred_type', 'pred_task_id', 'task_id', 'lag_hr_cnt']),\r\n  PROJECT: row => row,\r\n  PROJWBS: row => _.pick(row, ['wbs_id', 'wbs_short_name', 'wbs_name', 'parent_wbs_id', 'seq_num'])\r\n};\r\n\r\nexport const getS3JsonPromise = (\r\n  filename: string,\r\n  filteredData: any[],\r\n  bucketRegion: string,\r\n  bucket: string,\r\n  folder: string,\r\n  tags: string\r\n): Promise<any> => {\r\n  if (filters[filename] && filteredData.length) {\r\n    const s3Client = new AWS.S3({ region: bucketRegion });\r\n    const jsonContent = { mappers: {}, data: [] };\r\n    const filteredFirstElement = filters[filename](filteredData[0]);\r\n    _.each(Object.keys(filteredFirstElement), (key, idx) => {\r\n      jsonContent.mappers[key] = idx;\r\n    });\r\n    _.each(filteredData, dp => {\r\n      jsonContent.data.push(Object.keys(filteredFirstElement).map(key => dp[key]));\r\n    });\r\n    const jsonString = JSON.stringify(jsonContent);\r\n    const key = `${folder}/${filename}.json`;\r\n    const param = {\r\n      Bucket: bucket,\r\n      Key: key,\r\n      Body: jsonString,\r\n      ContentType: 'application/json',\r\n      Tagging: tags\r\n    };\r\n    return s3Client.upload(param).promise();\r\n  }\r\n  return Promise.resolve();\r\n};\r\n"]}